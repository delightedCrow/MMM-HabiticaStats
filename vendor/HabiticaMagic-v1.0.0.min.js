/*
 * HabiticaMagic.js
 * https://github.com/delightedCrow/HabiticaMagic
 *
 * A convenient way to interact with the Habitica API
 * (https://habitica.com/apidoc/).
 *
 * Copyright Â© 2019 JSC (@delightedCrow) & PJM (@ArrayOfFrost)
 *
 * MIT Licensed

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

class HabiticaUserTasksManager{constructor(t){this.apiData=t}get taskList(){return this.apiData}get todosDueToday(){return this.todosDueOnDate(moment().endOf("day"))}todosDueOnDate(t){for(var a=[],e=0;e<this.taskList.length;e++){let s=this.taskList[e];if("todo"==s.type)if(s.date)moment(s.date).isBefore(t)&&a.push(s)}return a}calculateDailyStatsFor(t){var a={dueCount:0,totalDamageToSelf:0,dailyDamageToSelf:0,bossDamage:0,dailiesEvaded:0};var e=t.stealth;let s=t.constitutionBonus;for(var i=0;i<this.taskList.length;i++){let l=this.taskList[i];if("daily"==l.type&&(l.isDue&&!l.completed))if(e>0)e--,a.dailiesEvaded++;else{a.dueCount++;var r=l.value<-47.27?-47.27:l.value;if(r=r>21.27?21.27:r,r=Math.abs(Math.pow(.9747,r)),l.checklist.length>0)for(var o=r/l.checklist.length,n=0;n<l.checklist.length;n++)l.checklist[n].completed&&(r-=o);var h=r*s*l.priority*2;if(a.dailyDamageToSelf+=Math.round(10*h)/10,t.isOnBossQuest){var u=l.priority<1?r*l.priority:r;u*=t.quest.data.boss.str,a.bossDamage+=u}}}a.totalDamageToSelf=a.dailyDamageToSelf+a.bossDamage,a.totalDamageToSelf=Math.ceil(10*a.totalDamageToSelf)/10,a.bossDamage=Math.ceil(10*a.bossDamage)/10,this.dailyStats=a}}class HabiticaUser{constructor(t){this.apiData=t,this.stats=this._calculateStats()}get gems(){return 4*this.apiData.balance}get hourglasses(){return this.apiData.purchased.plan.consecutive.trinkets}get gold(){return Math.round(this.apiData.stats.gp)}get goldCompact(){return new Intl.NumberFormat("lookup",{notation:"compact",compactDisplay:"short"}).format(this.gold)}get level(){return this.apiData.stats.lvl}get displayName(){return this.apiData.profile.name}get className(){return this.apiData.stats.class}get experience(){return Math.floor(this.apiData.stats.exp)}get experienceToLevel(){return Math.round(this.apiData.stats.toNextLevel)}get mana(){return Math.floor(this.apiData.stats.mp)}get manaMax(){return Math.round(this.apiData.stats.maxMP)}get health(){return Math.floor(this.apiData.stats.hp)}get healthMax(){return Math.round(this.apiData.stats.maxHealth)}get stealth(){return this.apiData.stats.buffs.stealth}get armor(){return this.apiData.items.gear.equipped}get costume(){return this.apiData.items.gear.costume}get outfit(){return 1==this.apiData.preferences.costume?this.costume:this.armor}get isSleeping(){return this.apiData.preferences.sleep}_calculateStats(){var t={totals:{str:0,con:0,int:0,per:0},armor:{str:0,con:0,int:0,per:0},buffs:{str:this.apiData.stats.buffs.str,con:this.apiData.stats.buffs.con,int:this.apiData.stats.buffs.int,per:this.apiData.stats.buffs.per},points:{str:this.apiData.stats.str,con:this.apiData.stats.con,int:this.apiData.stats.int,per:this.apiData.stats.per}};for(var a in this.armor){let s=this.armor[a];for(var e in t.armor)t.armor[e]+=s[e],this.className!==s.klass&&this.className!==s.specialClass||(t.armor[e]+=.5*s[e])}let s=Math.floor(this.level/2);for(var e in t.totals)t.totals[e]=t.armor[e]+t.buffs[e]+t.points[e]+s;return t}get constitutionBonus(){let t=1-this.stats.totals.con/250;return t<.1?.1:t}get quest(){return this.apiData.party.quest}get isOnQuest(){return null!=this.quest.data}get isOnBossQuest(){return!(!this.isOnQuest||null==this.quest.data.boss)}set tasks(t){this._taskManager=t,this.tasks.calculateDailyStatsFor(this)}get tasks(){return this._taskManager}}class HabiticaAPIManager{constructor(t="en",a){this.language=t,this.xclient=a,this.content={}}fetchContentData(t){const a="https://habitica.com/api/v3/content?language="+this.language;let e=this.constructor.APIRequest(a,this.xclient),s=this;e.onload=function(){if(200==this.status){let a=JSON.parse(this.responseText);s.content=a.data,t&&t()}},e.send()}fetchAuthenticatedUser(t,a,e){let s=this.constructor.authenticatedAPIRequest("https://habitica.com/api/v3/user",this.xclient,t,a),i=this;s.onload=function(){if(200==this.status){var t=JSON.parse(this.responseText).data;let a=new HabiticaUser(i.replaceKeysWithContent(t));e(a)}},s.send()}fetchUserTasks(t,a,e){let s=this.constructor.authenticatedAPIRequest("https://habitica.com/api/v3/tasks/user",this.xclient,t,a);s.onload=function(){if(200==this.status){var t=JSON.parse(this.responseText).data,a=new HabiticaUserTasksManager(t);e(a)}},s.send()}fetchUserWithTasks(t,a,e){this.fetchAuthenticatedUser(t,a,s=>{this.fetchUserTasks(t,a,t=>{s.tasks=t,e(s)})})}replaceKeysWithContent(t){for(var a of[t.items.gear.equipped,t.items.gear.costume])for(var e in a){let t=a[e],s=this.content.gear.flat[t];a[e]=s}return t.party.quest.key&&(t.party.quest.data=this.content.quests[t.party.quest.key]),t}static authenticatedAPIRequest(t,a,e,s){let i=new XMLHttpRequest;return i.open("GET",t),i.onerror=function(){console.error("HabiticaAPI Error: ",this.statusText)},i.setRequestHeader("x-api-user",e),i.setRequestHeader("x-api-key",s),i.setRequestHeader("x-client",a),i}static APIRequest(t,a){let e=new XMLHttpRequest;return e.open("GET",t),e.onerror=function(){console.error("HabiticaAPI Error: ",this.statusText)},e.setRequestHeader("x-client",this.xclient),e}}